buildscript {
  ext {
    verifierVersion = '1.2.3.RELEASE'
  }

  dependencies {
    classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:${verifierVersion}"
  }
}

plugins {
  id 'org.springframework.boot' version '2.1.3.RELEASE' apply false
  id 'java'
}

apply plugin: 'io.spring.dependency-management'

repositories {
  mavenCentral()
  maven { url 'https://repo.spring.io/milestone' }
}

ext {
  springCloudVersion = 'Greenwich.RELEASE'
  springBootVersion = '2.1.3.RELEASE'
  axonVersion = '4.0.3'
  aspectjVersion = '1.9.1'
  springfoxVersion = '2.8.0'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
    }
}

dependencies {
    compile project('customers')
    compile project('account.cmd')
    compile project('account.query')
    compile project('transactions')
    compile project('edgeservice')
    compile project('tests')
}

assemble.dependsOn(clean)

def springProjects = subprojects.findAll { project -> project.name.indexOf('cmd') != -1 || project.name.indexOf('query') != -1}
def supportProjects = subprojects.findAll { project -> project.name.equals('edgeservice') || project.name.equals('tests') }
def crudProjects = subprojects.findAll { project -> project.name.equals('customers') }

springProjects.addAll(supportProjects)
springProjects.addAll(crudProjects)
springProjects.add(project('transactions'))

allprojects {
    version = '0.1.0'
    group = 'com.ultimatesoftware.banking'
    sourceCompatibility = 1.8

	repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'https://dl.bintray.com/palantir/releases'
        }
        maven { url 'https://repo.spring.io/milestone' }
	}
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    checkstyle {
        configFile = new File(rootDir, "checkstyles.xml")
    }

    checkstyleTest {
        source = fileTree('src/test') {
            excludes = ['*.yml', '*contracts/org/springframework/cloud/contract/verifier/tests*']
        }
    }

    test {
        exclude '**/service/configuration/**'
        exclude '**/service/repositories/**'

        jacoco {
            append = false
            destinationFile = file("./jacoco/jacocoTest.exec")
            classDumpDir = file("./jacoco/classpathdumps")
        }
        def testCount = 0
        afterTest {
            desc, result ->
                println "${++testCount}.\t[$result.resultType]\t${desc.className.split(/\./)[-1]}.'$desc.name'"
        }
        afterSuite {
            desc, result ->
                // match outer-most suite
                if (!desc.parent) {
                    def results = "Results: $result.resultType ($result.testCount tests, $result.successfulTestCount successes, $result.failedTestCount failures, $result.skippedTestCount skipped)"
                    def repeat = results.length() + 4
                    println "\n ${'-' * repeat} \n | ${results} | \n ${'-' * repeat}"
                }
        }
    }

    jacoco {
        toolVersion = "0.8.2"
        reportsDir = file("./coverage")
    }

    jacocoTestReport {
        reports {
            html {
                enabled true
            }
        }
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: [
                                '**/service/configuration/**',
                                '**/service/repositories/**',
                                '**/events/**',
                                '**/exceptions/**',
                                '**/models/**'
                        ]
                )
            })
        }
    }

    test.finalizedBy(jacocoTestCoverageVerification)

}

configure(springProjects) {
  apply plugin: 'org.springframework.boot'
  apply plugin: 'groovy'
  apply plugin: 'spring-cloud-contract'
  apply plugin: 'io.spring.dependency-management'

    configurations {
        providedRuntime
    }

    dependencies {
        compile "org.springframework.boot:spring-boot-starter-actuator"
        compile "org.springframework.boot:spring-boot-starter-aop"
        compile("io.springfox:springfox-swagger2:${springfoxVersion}")
        compile("io.springfox:springfox-swagger-ui:${springfoxVersion}")
        testImplementation('org.junit.jupiter:junit-jupiter-api:5.3.2')
        testCompile('org.junit.jupiter:junit-jupiter-params:5.3.2')
        testRuntime('org.junit.jupiter:junit-jupiter-engine:5.3.2')
        testCompile "org.mockito:mockito-core:2.24.5"
        testCompile('org.mockito:mockito-junit-jupiter:2.24.5')
        compile('au.com.dius:pact-jvm-consumer-junit_2.12:3.6.2')
        testCompile("org.springframework.boot:spring-boot-starter-test")
        testCompile("org.springframework.cloud:spring-cloud-starter-contract-verifier")
        testCompile("org.springframework.cloud:spring-cloud-contract-spec")
    }

  dependencyManagement {
    imports {
      mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
  }
}

wrapper {
    gradleVersion = '4.8'
}

task printProj {
    println 'Projects: ' + springProjects
}

assemble.dependsOn(clean)
